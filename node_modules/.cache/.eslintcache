[{"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/index.js":"1","/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Game.js":"2","/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Tips.js":"3","/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/App.js":"4","/Users/ryandi/Documents/projects/react/game-of-life-functional/src/utilities/HistoryStack.js":"5","/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Board.js":"6"},{"size":203,"mtime":1614033464686,"results":"7","hashOfConfig":"8"},{"size":4046,"mtime":1614033157902,"results":"9","hashOfConfig":"8"},{"size":1205,"mtime":1614033167851,"results":"10","hashOfConfig":"8"},{"size":664,"mtime":1614033176813,"results":"11","hashOfConfig":"8"},{"size":1013,"mtime":1614032617531,"results":"12","hashOfConfig":"8"},{"size":1287,"mtime":1614033506874,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cq2mef",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/index.js",[],"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Game.js",["29","30"],"import React, { useEffect, useState, useRef } from 'react';\nimport '../styles/Game.css';\nimport HistoryStack from '../utilities/HistoryStack';\nimport Tips from './Tips.js';\nimport Board from './Board';\n\nexport default function Game(props) {\n\tconst prevBtn = React.createRef();\n\tconst [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n\tconst [cells, setCells] = useState([]);\n\tconst [prev, setPrev] = useState(false);\n\tconst [history] = useState(new HistoryStack(props.steps));\n\tconst [running, setRunning] = useState(false);\n\n\t// update the cells whenever the board gets updated\n\tuseEffect(() => {\n\t\t// do not recalculate the cells again\n\t\tif (!prev) {\n\t\t\tsetCells(makeCells());\n\t\t}\n\t\tsetPrev(false);\n\t}, [board]);\n\n\t// update the `Prev` button status whenever cells get updated\n\tuseEffect(() => {\n\t\tif (history.size === 0) {\n\t\t\tprevBtn.current.disabled = true;\n\t\t} else {\n\t\t\tprevBtn.current.disabled = false;\n\t\t}\n\t}, [cells]);\n\n\tuseInterval(\n\t\t() => {\n\t\t\tgetNextBoard();\n\t\t},\n\t\trunning ? 500 : null\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Tips width={props.size * props.cols} steps={props.steps} />\n\t\t\t<Board\n\t\t\t\tcells={cells}\n\t\t\t\tsize={props.size}\n\t\t\t\trows={props.rows}\n\t\t\t\tcols={props.cols}\n\t\t\t\tonClick={(x, y) => handleClick(x, y)}\n\t\t\t/>\n\t\t\t<div className=\"controls\" style={{ width: props.size * props.cols }}>\n\t\t\t\t<button className=\"btn\" ref={prevBtn} onClick={getPrevBoard}>\n\t\t\t\t\tPrev\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={getNextBoard}>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={toggleRun}>\n\t\t\t\t\t{running ? 'Pause' : 'Run'}\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={reset}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</>\n\t);\n\n\tfunction handleClick(x, y) {\n\t\tif (x >= 0 && x < props.cols && y >= 0 && y <= props.rows) {\n\t\t\tboard[y][x] = !board[y][x];\n\t\t}\n\t\tsetCells(makeCells());\n\t}\n\n\tfunction makeCells() {\n\t\tlet cells = [];\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tif (board[y][x]) cells.push({ x, y, color: randomColor() });\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t}\n\n\tfunction getNextBoard() {\n\t\thistory.push({\n\t\t\tcells: cells.slice(),\n\t\t\tboard: board.map((row) => row.slice()),\n\t\t});\n\t\tlet newBoard = board.map((row) => row.slice());\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tlet neighbors = numberOfNeighbors(board, x, y);\n\t\t\t\tif (newBoard[y][x]) {\n\t\t\t\t\tnewBoard[y][x] = neighbors === 2 || neighbors === 3;\n\t\t\t\t} else {\n\t\t\t\t\tif (!board[y][x] && neighbors === 3) {\n\t\t\t\t\t\tnewBoard[y][x] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetBoard(newBoard);\n\t}\n\n\tfunction getPrevBoard() {\n\t\tif (history.size > 0) {\n\t\t\tlet { cells, board } = history.pop();\n\t\t\tsetPrev(true);\n\t\t\tsetBoard(board);\n\t\t\tsetCells(cells);\n\t\t}\n\t}\n\n\tfunction toggleRun() {\n\t\tsetRunning((running) => !running);\n\t}\n\n\tfunction reset() {\n\t\tsetRunning(false);\n\t\tsetBoard(makeEmptyBoard(props.rows, props.cols));\n\t\tsetCells([]);\n\t\thistory.clear();\n\t}\n\n\tfunction numberOfNeighbors(b, x, y) {\n\t\tlet neighbors = 0;\n\t\tconst dirs = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, -1],\n\t\t\t[0, 1],\n\t\t\t[1, -1],\n\t\t\t[1, 0],\n\t\t\t[1, 1],\n\t\t];\n\n\t\tfor (let [offY, offX] of dirs) {\n\t\t\tlet _y = y + offY;\n\t\t\tlet _x = x + offX;\n\n\t\t\tif (_x >= 0 && _x < props.cols && _y >= 0 && _y < props.rows && b[_y][_x])\n\t\t\t\tneighbors++;\n\t\t}\n\t\treturn neighbors;\n\t}\n}\n\n// utilities\nfunction randomColor() {\n\tconst rc = () => 30 + Math.floor(Math.random() * 200);\n\treturn {\n\t\tr: rc(),\n\t\tg: rc(),\n\t\tb: rc(),\n\t};\n}\n\nfunction makeEmptyBoard(rows, cols) {\n\tlet results = [];\n\tfor (let y = 0; y < rows; y++) {\n\t\tresults.push([]);\n\t\tfor (let x = 0; x < cols; x++) {\n\t\t\tresults[y].push(false);\n\t\t}\n\t}\n\treturn results;\n}\n\nfunction useInterval(callback, delay) {\n\tconst savedCallback = useRef();\n\n\t// Remember the latest callback.\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\t// Set up the interval.\n\tuseEffect(() => {\n\t\tfunction tick() {\n\t\t\tsavedCallback.current();\n\t\t}\n\t\tif (delay !== null) {\n\t\t\tlet id = setInterval(tick, delay);\n\t\t\treturn () => clearInterval(id);\n\t\t}\n\t}, [delay]);\n}\n",["31","32"],"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Tips.js",["33"],"import '../styles/Tips.css';\n\nexport default function Tips(props) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"tip-container\"\n\t\t\tstyle={{\n\t\t\t\twidth: props.width ? props.width : '100%',\n\t\t\t\ttextAlign: props.textAlign ? props.textAlign : 'left',\n\t\t\t\tmargin: props.margin ? props.margin : '20px auto',\n\t\t\t}}\n\t\t>\n\t\t\t<div>\n\t\t\t\t<div className=\"btn-container\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn-close\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tdocument.querySelector('.tip-container').remove();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tX\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<p className=\"tip-content\">\n\t\t\t\t\tClick on the board to add or remove a cell. Click{' '}\n\t\t\t\t\t<strong>\"Next\"</strong> to get the next iteration and click{' '}\n\t\t\t\t\t<strong>\"Prev\"</strong> to go back. You can go back up to{' '}\n\t\t\t\t\t{props.steps} steps. You can also simply click <strong>\"Run\"</strong>{' '}\n\t\t\t\t\tto watch it unflod automatically. Finally, click{' '}\n\t\t\t\t\t<strong>\"Reset\"</strong> to simply clear the board and start over.\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\tYou can find out more about Conway's Game of Life{' '}\n\t\t\t\t\t<a\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n\t\t\t\t\t>\n\t\t\t\t\t\there\n\t\t\t\t\t</a>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/App.js",[],"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/utilities/HistoryStack.js",[],"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Board.js",[],{"ruleId":"34","severity":1,"message":"35","line":22,"column":5,"nodeType":"36","endLine":22,"endColumn":12,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":31,"column":5,"nodeType":"36","endLine":31,"endColumn":12,"suggestions":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":34,"column":6,"nodeType":"46","endLine":37,"endColumn":7},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'makeCells' and 'prev'. Either include them or remove the dependency array.","ArrayExpression",["47"],"React Hook useEffect has missing dependencies: 'history.size' and 'prevBtn'. Either include them or remove the dependency array.",["48"],"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [board, makeCells, prev]",{"range":"55","text":"56"},"Update the dependencies array to be: [cells, history.size, prevBtn]",{"range":"57","text":"58"},[725,732],"[board, makeCells, prev]",[938,945],"[cells, history.size, prevBtn]"]