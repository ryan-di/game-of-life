{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Game.css';\nimport HistoryStack from './HistoryStack';\nimport Tips from './Tips';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WIDTH = 600;\nconst HEIGHT = 400;\nconst ROWS = 20;\nconst COLS = 30;\nlet BOARD = makeEmptyBoard();\n\nfunction Cell({\n  x,\n  y,\n  size\n}) {\n  let left = size * x + 1;\n  let top = size * y + 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Cell\",\n    style: {\n      left,\n      top,\n      width: size - 1,\n      height: size - 1,\n      backgroundColor: `rgb(${top + 100}, ${left / 2}, ${top - 100})`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Cell;\nexport default function Game(props) {\n  _s();\n\n  // states\n  let boardRef = /*#__PURE__*/React.createRef();\n  let prevBtn = /*#__PURE__*/React.createRef();\n  const [cells, setCells] = useState([]);\n  const [disablePrev, setDisablePrev] = useState(true);\n  const [HISTORY] = useState(new HistoryStack(10));\n  useEffect(() => {\n    prevBtn.current.disabled = disablePrev;\n  }, [disablePrev]);\n  setCells(randomCells()); // render\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      style: {\n        width: WIDTH,\n        height: HEIGHT,\n        backgroundSize: `${props.size}px ${props.size}px`\n      },\n      ref: boardRef,\n      onClick: handleClick,\n      children: cells.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n        x: cell.x,\n        y: cell.y,\n        size: props.size\n      }, `${cell.x} ${cell.y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        width: WIDTH\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        ref: prevBtn,\n        onClick: getPrevBoard,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: getNextBoard,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Tips, {\n      width: WIDTH\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n  /**\n   * Add or remove a cell on the board\n   * @param {MouseEvent} event\n   */\n\n  function handleClick(event) {\n    const elemOffset = getElementOffset(boardRef);\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n    const x = Math.floor(offsetX / props.size);\n    const y = Math.floor(offsetY / props.size);\n    if (x >= 0 && x < COLS && y >= 0 && y < ROWS) BOARD[y][x] = !BOARD[y][x];\n    setCells(makeCells(BOARD));\n  }\n\n  function getNextBoard() {\n    HISTORY.push(new Array(...BOARD));\n    let newBoard = makeEmptyBoard();\n\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        let neighbors = numberOfNeighbors(x, y);\n\n        if (BOARD[y][x]) {\n          newBoard[y][x] = neighbors === 2 || neighbors === 3 ? true : false;\n        } else {\n          if (!BOARD[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    BOARD = newBoard;\n    setCells(makeCells(BOARD));\n    setDisablePrev(false);\n  }\n\n  function getPrevBoard() {\n    let b = HISTORY.pop();\n\n    if (b) {\n      BOARD = b;\n      setCells(makeCells(BOARD));\n    }\n\n    if (HISTORY.size === 0) setDisablePrev(true);\n  }\n\n  function reset() {\n    HISTORY.clear();\n    BOARD = makeEmptyBoard();\n    setDisablePrev(true);\n    setCells([]);\n  }\n\n  function randomCells() {\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        BOARD[y][x] = Math.random() >= 0.5;\n      }\n    }\n\n    return makeCells(BOARD);\n  }\n} // utility functions for boards and cells\n\n/**\n * Takes a game state board and returns the correpondings cells\n * which is an array of coordinates\n * @param {Array} b\n */\n\n_s(Game, \"bfbIQbXrwVp/0uNgxEYujBzuWGU=\");\n\n_c2 = Game;\n\nfunction makeCells(b) {\n  let cells = [];\n\n  for (let y = 0; y < ROWS; y++) {\n    for (let x = 0; x < COLS; x++) {\n      if (b[y][x]) cells.push({\n        x,\n        y\n      });\n    }\n  }\n\n  return cells;\n}\n/**\n * Return an empty board\n */\n\n\nfunction makeEmptyBoard() {\n  let result = [];\n\n  for (let y = 0; y < ROWS; y++) {\n    result.push([]);\n\n    for (let x = 0; x < COLS; x++) {\n      result[y].push(false);\n    }\n  }\n\n  return result;\n}\n/**\n * Calculates the number of neighbors for the cell at {x, y}\n * @param {Array} board\n * @param {number} x\n * @param {number} y\n */\n\n\nfunction numberOfNeighbors(x, y) {\n  let neighbors = 0;\n  const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, -1], [0, -1]];\n\n  for (let i = 0; i < dirs.length; i++) {\n    let [offY, offX] = dirs[i];\n\n    let _y = y + offY;\n\n    let _x = x + offX;\n\n    if (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && BOARD[_y][_x]) neighbors++;\n  }\n\n  return neighbors;\n}\n/**\n * Returns the offset of the board\n * @param {import('react').Ref} boardRef\n */\n\n\nfunction getElementOffset(boardRef) {\n  const rect = boardRef.current.getBoundingClientRect();\n  const doc = document.documentElement;\n  return {\n    x: rect.left + window.pageXOffset - doc.clientLeft,\n    y: rect.top + window.pageYOffset - doc.clientTop\n  };\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js"],"names":["React","useEffect","useState","HistoryStack","Tips","WIDTH","HEIGHT","ROWS","COLS","BOARD","makeEmptyBoard","Cell","x","y","size","left","top","width","height","backgroundColor","Game","props","boardRef","createRef","prevBtn","cells","setCells","disablePrev","setDisablePrev","HISTORY","current","disabled","randomCells","backgroundSize","handleClick","map","cell","getPrevBoard","getNextBoard","reset","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","makeCells","push","Array","newBoard","neighbors","numberOfNeighbors","b","pop","clear","random","result","dirs","i","length","offY","offX","_y","_x","rect","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;AACA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,IAAI,GAAG,EAAb;AACA,IAAIC,KAAK,GAAGC,cAAc,EAA1B;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQC,EAAAA;AAAR,CAAd,EAA8B;AAC7B,MAAIC,IAAI,GAAGD,IAAI,GAAGF,CAAP,GAAW,CAAtB;AACA,MAAII,GAAG,GAAGF,IAAI,GAAGD,CAAP,GAAW,CAArB;AACA,sBACC;AACC,IAAA,SAAS,EAAC,MADX;AAEC,IAAA,KAAK,EAAE;AACNE,MAAAA,IADM;AAENC,MAAAA,GAFM;AAGNC,MAAAA,KAAK,EAAEH,IAAI,GAAG,CAHR;AAINI,MAAAA,MAAM,EAAEJ,IAAI,GAAG,CAJT;AAKNK,MAAAA,eAAe,EAAG,OAAMH,GAAG,GAAG,GAAI,KAAID,IAAI,GAAG,CAAE,KAAIC,GAAG,GAAG,GAAI;AALvD;AAFR;AAAA;AAAA;AAAA;AAAA,UADD;AAYA;;KAfQL,I;AAiBT,eAAe,SAASS,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnC;AACA,MAAIC,QAAQ,gBAAGtB,KAAK,CAACuB,SAAN,EAAf;AACA,MAAIC,OAAO,gBAAGxB,KAAK,CAACuB,SAAN,EAAd;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACyB,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC2B,OAAD,IAAY3B,QAAQ,CAAC,IAAIC,YAAJ,CAAiB,EAAjB,CAAD,CAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACfuB,IAAAA,OAAO,CAACM,OAAR,CAAgBC,QAAhB,GAA2BJ,WAA3B;AACA,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIAD,EAAAA,QAAQ,CAACM,WAAW,EAAZ,CAAR,CAZmC,CAanC;;AACA,sBACC;AAAA,4BACC;AACC,MAAA,SAAS,EAAC,OADX;AAEC,MAAA,KAAK,EAAE;AACNf,QAAAA,KAAK,EAAEZ,KADD;AAENa,QAAAA,MAAM,EAAEZ,MAFF;AAGN2B,QAAAA,cAAc,EAAG,GAAEZ,KAAK,CAACP,IAAK,MAAKO,KAAK,CAACP,IAAK;AAHxC,OAFR;AAOC,MAAA,GAAG,EAAEQ,QAPN;AAQC,MAAA,OAAO,EAAEY,WARV;AAAA,gBAUET,KAAK,CAACU,GAAN,CAAWC,IAAD,iBACV,QAAC,IAAD;AACC,QAAA,CAAC,EAAEA,IAAI,CAACxB,CADT;AAEC,QAAA,CAAC,EAAEwB,IAAI,CAACvB,CAFT;AAGC,QAAA,IAAI,EAAEQ,KAAK,CAACP;AAHb,SAIO,GAAEsB,IAAI,CAACxB,CAAE,IAAGwB,IAAI,CAACvB,CAAE,EAJ1B;AAAA;AAAA;AAAA;AAAA,cADA;AAVF;AAAA;AAAA;AAAA;AAAA,YADD,eAoBC;AACC,MAAA,SAAS,EAAC,UADX;AAEC,MAAA,KAAK,EAAE;AACNI,QAAAA,KAAK,EAAEZ;AADD,OAFR;AAAA,8BAMC;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,GAAG,EAAEmB,OAA7B;AAAsC,QAAA,OAAO,EAAEa,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAND,eASC;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,OAAO,EAAEC,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATD,eAYC;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,OAAO,EAAEC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZD;AAAA;AAAA;AAAA;AAAA;AAAA,YApBD,eAoCC,QAAC,IAAD;AAAM,MAAA,KAAK,EAAElC;AAAb;AAAA;AAAA;AAAA;AAAA,YApCD;AAAA,kBADD;AAyCA;AACD;AACA;AACA;;AACC,WAAS6B,WAAT,CAAqBM,KAArB,EAA4B;AAC3B,UAAMC,UAAU,GAAGC,gBAAgB,CAACpB,QAAD,CAAnC;AACA,UAAMqB,OAAO,GAAGH,KAAK,CAACI,OAAN,GAAgBH,UAAU,CAAC7B,CAA3C;AACA,UAAMiC,OAAO,GAAGL,KAAK,CAACM,OAAN,GAAgBL,UAAU,CAAC5B,CAA3C;AAEA,UAAMD,CAAC,GAAGmC,IAAI,CAACC,KAAL,CAAWL,OAAO,GAAGtB,KAAK,CAACP,IAA3B,CAAV;AACA,UAAMD,CAAC,GAAGkC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAGxB,KAAK,CAACP,IAA3B,CAAV;AAEA,QAAIF,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGJ,IAAd,IAAsBK,CAAC,IAAI,CAA3B,IAAgCA,CAAC,GAAGN,IAAxC,EACCE,KAAK,CAACI,CAAD,CAAL,CAASD,CAAT,IAAc,CAACH,KAAK,CAACI,CAAD,CAAL,CAASD,CAAT,CAAf;AACDc,IAAAA,QAAQ,CAACuB,SAAS,CAACxC,KAAD,CAAV,CAAR;AACA;;AAED,WAAS6B,YAAT,GAAwB;AACvBT,IAAAA,OAAO,CAACqB,IAAR,CAAa,IAAIC,KAAJ,CAAU,GAAG1C,KAAb,CAAb;AACA,QAAI2C,QAAQ,GAAG1C,cAAc,EAA7B;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;AAC9B,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC9B,YAAIyC,SAAS,GAAGC,iBAAiB,CAAC1C,CAAD,EAAIC,CAAJ,CAAjC;;AACA,YAAIJ,KAAK,CAACI,CAAD,CAAL,CAASD,CAAT,CAAJ,EAAiB;AAChBwC,UAAAA,QAAQ,CAACvC,CAAD,CAAR,CAAYD,CAAZ,IACCyC,SAAS,KAAK,CAAd,IAAmBA,SAAS,KAAK,CAAjC,GAAqC,IAArC,GAA4C,KAD7C;AAEA,SAHD,MAGO;AACN,cAAI,CAAC5C,KAAK,CAACI,CAAD,CAAL,CAASD,CAAT,CAAD,IAAgByC,SAAS,KAAK,CAAlC,EAAqC;AACpCD,YAAAA,QAAQ,CAACvC,CAAD,CAAR,CAAYD,CAAZ,IAAiB,IAAjB;AACA;AACD;AACD;AACD;;AACDH,IAAAA,KAAK,GAAG2C,QAAR;AACA1B,IAAAA,QAAQ,CAACuB,SAAS,CAACxC,KAAD,CAAV,CAAR;AACAmB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACA;;AAED,WAASS,YAAT,GAAwB;AACvB,QAAIkB,CAAC,GAAG1B,OAAO,CAAC2B,GAAR,EAAR;;AACA,QAAID,CAAJ,EAAO;AACN9C,MAAAA,KAAK,GAAG8C,CAAR;AACA7B,MAAAA,QAAQ,CAACuB,SAAS,CAACxC,KAAD,CAAV,CAAR;AACA;;AACD,QAAIoB,OAAO,CAACf,IAAR,KAAiB,CAArB,EAAwBc,cAAc,CAAC,IAAD,CAAd;AACxB;;AAED,WAASW,KAAT,GAAiB;AAChBV,IAAAA,OAAO,CAAC4B,KAAR;AACAhD,IAAAA,KAAK,GAAGC,cAAc,EAAtB;AACAkB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACA;;AAED,WAASM,WAAT,GAAuB;AACtB,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;AAC9B,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC9BH,QAAAA,KAAK,CAACI,CAAD,CAAL,CAASD,CAAT,IAAcmC,IAAI,CAACW,MAAL,MAAiB,GAA/B;AACA;AACD;;AACD,WAAOT,SAAS,CAACxC,KAAD,CAAhB;AACA;AACD,C,CAED;;AAEA;AACA;AACA;AACA;AACA;;GA9HwBW,I;;MAAAA,I;;AA+HxB,SAAS6B,SAAT,CAAmBM,CAAnB,EAAsB;AACrB,MAAI9B,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;AAC9B,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC9B,UAAI2C,CAAC,CAAC1C,CAAD,CAAD,CAAKD,CAAL,CAAJ,EAAaa,KAAK,CAACyB,IAAN,CAAW;AAAEtC,QAAAA,CAAF;AAAKC,QAAAA;AAAL,OAAX;AACb;AACD;;AACD,SAAOY,KAAP;AACA;AAED;AACA;AACA;;;AACA,SAASf,cAAT,GAA0B;AACzB,MAAIiD,MAAM,GAAG,EAAb;;AACA,OAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;AAC9B8C,IAAAA,MAAM,CAACT,IAAP,CAAY,EAAZ;;AACA,SAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC9B+C,MAAAA,MAAM,CAAC9C,CAAD,CAAN,CAAUqC,IAAV,CAAe,KAAf;AACA;AACD;;AACD,SAAOS,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,iBAAT,CAA2B1C,CAA3B,EAA8BC,CAA9B,EAAiC;AAChC,MAAIwC,SAAS,GAAG,CAAhB;AACA,QAAMO,IAAI,GAAG,CACZ,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CADY,EAEZ,CAAC,CAAC,CAAF,EAAK,CAAL,CAFY,EAGZ,CAAC,CAAC,CAAF,EAAK,CAAL,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,CALY,EAMZ,CAAC,CAAD,EAAI,CAAC,CAAL,CANY,EAOZ,CAAC,CAAD,EAAI,CAAC,CAAL,CAPY,CAAb;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC,QAAI,CAACE,IAAD,EAAOC,IAAP,IAAeJ,IAAI,CAACC,CAAD,CAAvB;;AACA,QAAII,EAAE,GAAGpD,CAAC,GAAGkD,IAAb;;AACA,QAAIG,EAAE,GAAGtD,CAAC,GAAGoD,IAAb;;AAEA,QAAIE,EAAE,IAAI,CAAN,IAAWA,EAAE,GAAG1D,IAAhB,IAAwByD,EAAE,IAAI,CAA9B,IAAmCA,EAAE,GAAG1D,IAAxC,IAAgDE,KAAK,CAACwD,EAAD,CAAL,CAAUC,EAAV,CAApD,EACCb,SAAS;AACV;;AACD,SAAOA,SAAP;AACA;AAED;AACA;AACA;AACA;;;AACA,SAASX,gBAAT,CAA0BpB,QAA1B,EAAoC;AACnC,QAAM6C,IAAI,GAAG7C,QAAQ,CAACQ,OAAT,CAAiBsC,qBAAjB,EAAb;AACA,QAAMC,GAAG,GAAGC,QAAQ,CAACC,eAArB;AAEA,SAAO;AACN3D,IAAAA,CAAC,EAAEuD,IAAI,CAACpD,IAAL,GAAYyD,MAAM,CAACC,WAAnB,GAAiCJ,GAAG,CAACK,UADlC;AAEN7D,IAAAA,CAAC,EAAEsD,IAAI,CAACnD,GAAL,GAAWwD,MAAM,CAACG,WAAlB,GAAgCN,GAAG,CAACO;AAFjC,GAAP;AAIA","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Game.css';\nimport HistoryStack from './HistoryStack';\nimport Tips from './Tips';\n\nconst WIDTH = 600;\nconst HEIGHT = 400;\nconst ROWS = 20;\nconst COLS = 30;\nlet BOARD = makeEmptyBoard();\n\nfunction Cell({ x, y, size }) {\n\tlet left = size * x + 1;\n\tlet top = size * y + 1;\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Cell\"\n\t\t\tstyle={{\n\t\t\t\tleft,\n\t\t\t\ttop,\n\t\t\t\twidth: size - 1,\n\t\t\t\theight: size - 1,\n\t\t\t\tbackgroundColor: `rgb(${top + 100}, ${left / 2}, ${top - 100})`,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nexport default function Game(props) {\n\t// states\n\tlet boardRef = React.createRef();\n\tlet prevBtn = React.createRef();\n\tconst [cells, setCells] = useState([]);\n\tconst [disablePrev, setDisablePrev] = useState(true);\n\tconst [HISTORY] = useState(new HistoryStack(10));\n\n\tuseEffect(() => {\n\t\tprevBtn.current.disabled = disablePrev;\n\t}, [disablePrev]);\n\n\tsetCells(randomCells());\n\t// render\n\treturn (\n\t\t<>\n\t\t\t<div\n\t\t\t\tclassName=\"Board\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t\theight: HEIGHT,\n\t\t\t\t\tbackgroundSize: `${props.size}px ${props.size}px`,\n\t\t\t\t}}\n\t\t\t\tref={boardRef}\n\t\t\t\tonClick={handleClick}\n\t\t\t>\n\t\t\t\t{cells.map((cell) => (\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tx={cell.x}\n\t\t\t\t\t\ty={cell.y}\n\t\t\t\t\t\tsize={props.size}\n\t\t\t\t\t\tkey={`${cell.x} ${cell.y}`}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"controls\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<button className=\"btn\" ref={prevBtn} onClick={getPrevBoard}>\n\t\t\t\t\tPrev\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={getNextBoard}>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={reset}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<Tips width={WIDTH} />\n\t\t</>\n\t);\n\n\t/**\n\t * Add or remove a cell on the board\n\t * @param {MouseEvent} event\n\t */\n\tfunction handleClick(event) {\n\t\tconst elemOffset = getElementOffset(boardRef);\n\t\tconst offsetX = event.clientX - elemOffset.x;\n\t\tconst offsetY = event.clientY - elemOffset.y;\n\n\t\tconst x = Math.floor(offsetX / props.size);\n\t\tconst y = Math.floor(offsetY / props.size);\n\n\t\tif (x >= 0 && x < COLS && y >= 0 && y < ROWS)\n\t\t\tBOARD[y][x] = !BOARD[y][x];\n\t\tsetCells(makeCells(BOARD));\n\t}\n\n\tfunction getNextBoard() {\n\t\tHISTORY.push(new Array(...BOARD));\n\t\tlet newBoard = makeEmptyBoard();\n\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tlet neighbors = numberOfNeighbors(x, y);\n\t\t\t\tif (BOARD[y][x]) {\n\t\t\t\t\tnewBoard[y][x] =\n\t\t\t\t\t\tneighbors === 2 || neighbors === 3 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tif (!BOARD[y][x] && neighbors === 3) {\n\t\t\t\t\t\tnewBoard[y][x] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tBOARD = newBoard;\n\t\tsetCells(makeCells(BOARD));\n\t\tsetDisablePrev(false);\n\t}\n\n\tfunction getPrevBoard() {\n\t\tlet b = HISTORY.pop();\n\t\tif (b) {\n\t\t\tBOARD = b;\n\t\t\tsetCells(makeCells(BOARD));\n\t\t}\n\t\tif (HISTORY.size === 0) setDisablePrev(true);\n\t}\n\n\tfunction reset() {\n\t\tHISTORY.clear();\n\t\tBOARD = makeEmptyBoard();\n\t\tsetDisablePrev(true);\n\t\tsetCells([]);\n\t}\n\n\tfunction randomCells() {\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tBOARD[y][x] = Math.random() >= 0.5;\n\t\t\t}\n\t\t}\n\t\treturn makeCells(BOARD);\n\t}\n}\n\n// utility functions for boards and cells\n\n/**\n * Takes a game state board and returns the correpondings cells\n * which is an array of coordinates\n * @param {Array} b\n */\nfunction makeCells(b) {\n\tlet cells = [];\n\tfor (let y = 0; y < ROWS; y++) {\n\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\tif (b[y][x]) cells.push({ x, y });\n\t\t}\n\t}\n\treturn cells;\n}\n\n/**\n * Return an empty board\n */\nfunction makeEmptyBoard() {\n\tlet result = [];\n\tfor (let y = 0; y < ROWS; y++) {\n\t\tresult.push([]);\n\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\tresult[y].push(false);\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Calculates the number of neighbors for the cell at {x, y}\n * @param {Array} board\n * @param {number} x\n * @param {number} y\n */\nfunction numberOfNeighbors(x, y) {\n\tlet neighbors = 0;\n\tconst dirs = [\n\t\t[-1, -1],\n\t\t[-1, 0],\n\t\t[-1, 1],\n\t\t[0, 1],\n\t\t[1, 1],\n\t\t[1, -1],\n\t\t[0, -1],\n\t];\n\n\tfor (let i = 0; i < dirs.length; i++) {\n\t\tlet [offY, offX] = dirs[i];\n\t\tlet _y = y + offY;\n\t\tlet _x = x + offX;\n\n\t\tif (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && BOARD[_y][_x])\n\t\t\tneighbors++;\n\t}\n\treturn neighbors;\n}\n\n/**\n * Returns the offset of the board\n * @param {import('react').Ref} boardRef\n */\nfunction getElementOffset(boardRef) {\n\tconst rect = boardRef.current.getBoundingClientRect();\n\tconst doc = document.documentElement;\n\n\treturn {\n\t\tx: rect.left + window.pageXOffset - doc.clientLeft,\n\t\ty: rect.top + window.pageYOffset - doc.clientTop,\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}