{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/NewGame.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './NewGame.css';\nimport HistoryStack from './HistoryStack';\nimport Tips from './Tips';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Cell(props) {\n  _s();\n\n  let left = props.size * props.x + 1;\n  let top = props.size * props.y + 1;\n  let size = props.size - 1;\n  const [color] = useState(props.color);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Cell\",\n    style: {\n      left,\n      top,\n      width: size,\n      height: size,\n      backgroundColor: `rgb(${color.r}, ${color.g}, ${color.b})`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Cell, \"42HK6m5AIr09a8SaL6H1DD9LG0o=\");\n\n_c = Cell;\n\nfunction Board(props) {\n  let boardRef = /*#__PURE__*/React.createRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    style: {\n      width: props.size * props.cols,\n      height: props.size * props.rows,\n      backgroundSize: `${props.size}px ${props.size}px`\n    },\n    ref: boardRef,\n    onClick: event => {\n      const pos = getClickPosition(event);\n      props.onClick(pos.x, pos.y);\n    },\n    children: props.cells.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n      x: cell.x,\n      y: cell.y,\n      color: cell.color,\n      size: props.size\n    }, `${cell.y}, ${cell.x}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n\n  function getClickPosition(event) {\n    const rect = boardRef.current.getBoundingClientRect();\n    const offX = event.clientX - rect.left;\n    const offY = event.clientY - rect.top;\n    const x = Math.floor(offX / props.size);\n    const y = Math.floor(offY / props.size);\n    return {\n      x,\n      y\n    };\n  }\n}\n\n_c2 = Board;\nexport default function Game(props) {\n  _s2();\n\n  const prevBtn = /*#__PURE__*/React.createRef();\n  const [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n  const [cells, setCells] = useState([]);\n  const [history] = useState(new HistoryStack(10));\n  useEffect(() => {\n    if (history.size === 0) {\n      prevBtn.current.disabled = true;\n    } else {\n      prevBtn.current.disabled = false;\n    }\n  }, [cells]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: cells,\n      size: props.size,\n      rows: props.rows,\n      cols: props.cols,\n      onClick: (x, y) => handleClick(x, y)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        width: props.size * props.cols\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        ref: prevBtn,\n        onClick: getPrevBoard,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: getNextBoard,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Tips, {\n      width: props.size * props.cols\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n\n  function handleClick(x, y) {\n    if (x >= 0 && x < props.cols && y >= 0 && y <= props.rows) {\n      board[y][x] = !board[y][x];\n    }\n\n    setCells(makeCells());\n  }\n\n  function makeCells() {\n    let cells = [];\n\n    for (let y = 0; y < props.rows; y++) {\n      for (let x = 0; x < props.cols; x++) {\n        if (board[y][x]) cells.push({\n          x,\n          y,\n          color: randomColor()\n        });\n      }\n    }\n\n    return cells;\n  }\n\n  function getNextBoard() {\n    console.log('clicked');\n    console.log(board);\n    history.push({\n      cells: cells.slice(),\n      board: board.map(row => row.slice())\n    });\n    let newBoard = board.map(row => row.slice());\n\n    for (let y = 0; y < props.rows; y++) {\n      for (let x = 0; x < props.cols; x++) {\n        let neighbors = numberOfNeighbors(board, x, y);\n\n        if (newBoard[y][x]) {\n          newBoard[y][x] = neighbors === 2 || neighbors === 3;\n        } else {\n          if (!board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    setBoard(newBoard);\n    const c = makeCells();\n    console.log(c);\n    setCells(c);\n  }\n\n  function getPrevBoard() {\n    if (history.size > 0) {\n      let {\n        cells,\n        board\n      } = history.pop();\n      setBoard(board);\n      setCells(cells);\n    }\n  }\n\n  function reset() {\n    setBoard(makeEmptyBoard(props.rows, props.cols));\n    setCells([]);\n    history.clear();\n  }\n\n  function numberOfNeighbors(b, x, y) {\n    let neighbors = 0;\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\n    for (let [offY, offX] of dirs) {\n      let _y = y + offY;\n\n      let _x = x + offX;\n\n      if (_x >= 0 && _x < props.cols && _y >= 0 && _y < props.rows && b[_y][_x]) neighbors++;\n    }\n\n    return neighbors;\n  }\n} // utilities\n\n_s2(Game, \"HNGMaznxcWWz9+zQx3aVtLqUVcs=\");\n\n_c3 = Game;\n\nfunction randomColor() {\n  const rc = () => 30 + Math.floor(Math.random() * 200);\n\n  return {\n    r: rc(),\n    g: rc(),\n    b: rc()\n  };\n}\n\nfunction makeEmptyBoard(rows, cols) {\n  let results = [];\n\n  for (let y = 0; y < rows; y++) {\n    results.push([]);\n\n    for (let x = 0; x < cols; x++) {\n      results[y].push(false);\n    }\n  }\n\n  return results;\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/NewGame.js"],"names":["React","useEffect","useState","HistoryStack","Tips","Cell","props","left","size","x","top","y","color","width","height","backgroundColor","r","g","b","Board","boardRef","createRef","cols","rows","backgroundSize","event","pos","getClickPosition","onClick","cells","map","cell","rect","current","getBoundingClientRect","offX","clientX","offY","clientY","Math","floor","Game","prevBtn","board","setBoard","makeEmptyBoard","setCells","history","disabled","handleClick","getPrevBoard","getNextBoard","reset","makeCells","push","randomColor","console","log","slice","row","newBoard","neighbors","numberOfNeighbors","c","pop","clear","dirs","_y","_x","rc","random","results"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './NewGame.css';\nimport HistoryStack from './HistoryStack';\nimport Tips from './Tips';\n\nfunction Cell(props) {\n\tlet left = props.size * props.x + 1;\n\tlet top = props.size * props.y + 1;\n\tlet size = props.size - 1;\n\tconst [color] = useState(props.color);\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Cell\"\n\t\t\tstyle={{\n\t\t\t\tleft,\n\t\t\t\ttop,\n\t\t\t\twidth: size,\n\t\t\t\theight: size,\n\t\t\t\tbackgroundColor: `rgb(${color.r}, ${color.g}, ${color.b})`,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nfunction Board(props) {\n\tlet boardRef = React.createRef();\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Board\"\n\t\t\tstyle={{\n\t\t\t\twidth: props.size * props.cols,\n\t\t\t\theight: props.size * props.rows,\n\t\t\t\tbackgroundSize: `${props.size}px ${props.size}px`,\n\t\t\t}}\n\t\t\tref={boardRef}\n\t\t\tonClick={(event) => {\n\t\t\t\tconst pos = getClickPosition(event);\n\t\t\t\tprops.onClick(pos.x, pos.y);\n\t\t\t}}\n\t\t>\n\t\t\t{props.cells.map((cell) => (\n\t\t\t\t<Cell\n\t\t\t\t\tx={cell.x}\n\t\t\t\t\ty={cell.y}\n\t\t\t\t\tcolor={cell.color}\n\t\t\t\t\tsize={props.size}\n\t\t\t\t\tkey={`${cell.y}, ${cell.x}`}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n\n\tfunction getClickPosition(event) {\n\t\tconst rect = boardRef.current.getBoundingClientRect();\n\t\tconst offX = event.clientX - rect.left;\n\t\tconst offY = event.clientY - rect.top;\n\t\tconst x = Math.floor(offX / props.size);\n\t\tconst y = Math.floor(offY / props.size);\n\t\treturn {\n\t\t\tx,\n\t\t\ty,\n\t\t};\n\t}\n}\n\nexport default function Game(props) {\n\tconst prevBtn = React.createRef();\n\tconst [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n\tconst [cells, setCells] = useState([]);\n\tconst [history] = useState(new HistoryStack(10));\n\n\tuseEffect(() => {\n\t\tif (history.size === 0) {\n\t\t\tprevBtn.current.disabled = true;\n\t\t} else {\n\t\t\tprevBtn.current.disabled = false;\n\t\t}\n\t}, [cells]);\n\n\treturn (\n\t\t<>\n\t\t\t<Board\n\t\t\t\tcells={cells}\n\t\t\t\tsize={props.size}\n\t\t\t\trows={props.rows}\n\t\t\t\tcols={props.cols}\n\t\t\t\tonClick={(x, y) => handleClick(x, y)}\n\t\t\t/>\n\t\t\t<div className=\"controls\" style={{ width: props.size * props.cols }}>\n\t\t\t\t<button className=\"btn\" ref={prevBtn} onClick={getPrevBoard}>\n\t\t\t\t\tPrev\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={getNextBoard}>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={reset}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<Tips width={props.size * props.cols} />\n\t\t</>\n\t);\n\n\tfunction handleClick(x, y) {\n\t\tif (x >= 0 && x < props.cols && y >= 0 && y <= props.rows) {\n\t\t\tboard[y][x] = !board[y][x];\n\t\t}\n\t\tsetCells(makeCells());\n\t}\n\n\tfunction makeCells() {\n\t\tlet cells = [];\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tif (board[y][x]) cells.push({ x, y, color: randomColor() });\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t}\n\n\tfunction getNextBoard() {\n\t\tconsole.log('clicked');\n\t\tconsole.log(board);\n\t\thistory.push({\n\t\t\tcells: cells.slice(),\n\t\t\tboard: board.map((row) => row.slice()),\n\t\t});\n\t\tlet newBoard = board.map((row) => row.slice());\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tlet neighbors = numberOfNeighbors(board, x, y);\n\t\t\t\tif (newBoard[y][x]) {\n\t\t\t\t\tnewBoard[y][x] = neighbors === 2 || neighbors === 3;\n\t\t\t\t} else {\n\t\t\t\t\tif (!board[y][x] && neighbors === 3) {\n\t\t\t\t\t\tnewBoard[y][x] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetBoard(newBoard);\n\t\tconst c = makeCells();\n\t\tconsole.log(c);\n\t\tsetCells(c);\n\t}\n\n\tfunction getPrevBoard() {\n\t\tif (history.size > 0) {\n\t\t\tlet { cells, board } = history.pop();\n\t\t\tsetBoard(board);\n\t\t\tsetCells(cells);\n\t\t}\n\t}\n\n\tfunction reset() {\n\t\tsetBoard(makeEmptyBoard(props.rows, props.cols));\n\t\tsetCells([]);\n\t\thistory.clear();\n\t}\n\n\tfunction numberOfNeighbors(b, x, y) {\n\t\tlet neighbors = 0;\n\t\tconst dirs = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, -1],\n\t\t\t[0, 1],\n\t\t\t[1, -1],\n\t\t\t[1, 0],\n\t\t\t[1, 1],\n\t\t];\n\n\t\tfor (let [offY, offX] of dirs) {\n\t\t\tlet _y = y + offY;\n\t\t\tlet _x = x + offX;\n\n\t\t\tif (_x >= 0 && _x < props.cols && _y >= 0 && _y < props.rows && b[_y][_x])\n\t\t\t\tneighbors++;\n\t\t}\n\t\treturn neighbors;\n\t}\n}\n\n// utilities\nfunction randomColor() {\n\tconst rc = () => 30 + Math.floor(Math.random() * 200);\n\treturn {\n\t\tr: rc(),\n\t\tg: rc(),\n\t\tb: rc(),\n\t};\n}\n\nfunction makeEmptyBoard(rows, cols) {\n\tlet results = [];\n\tfor (let y = 0; y < rows; y++) {\n\t\tresults.push([]);\n\t\tfor (let x = 0; x < cols; x++) {\n\t\t\tresults[y].push(false);\n\t\t}\n\t}\n\treturn results;\n}\n"]},"metadata":{},"sourceType":"module"}