{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals'; // function Cell(props) {\n// \tconst [clicked, setClicked] = useState(false);\n// \treturn (\n// \t\t<button\n// \t\t\tclassName=\"cell\"\n// \t\t\tonClick={() => {\n// \t\t\t\tprops.onClick();\n// \t\t\t\tsetClicked(!clicked);\n// \t\t\t}}\n// \t\t\tstyle={{\n// \t\t\t\tbackgroundColor: clicked ? 'black' : 'white',\n// \t\t\t}}\n// \t\t></button>\n// \t);\n// }\n// function Board(props) {\n// \tfunction renderCell(i) {\n// \t\treturn <Cell onClick={() => props.onClick(i)} key={i} />;\n// \t}\n// \tlet rows = [];\n// \tlet cols = [];\n// \tfor (let i = 0; i < props.rows; i++) {\n// \t\trows.push(i);\n// \t}\n// \tfor (let i = 0; i < props.cols; i++) {\n// \t\tcols.push(i);\n// \t}\n// \treturn (\n// \t\t<div style={{ margin: '0px auto', maxWidth: '800px' }}>\n// \t\t\t{rows.map((i) => {\n// \t\t\t\treturn (\n// \t\t\t\t\t<div className=\"board-row\" key={`row ${i}`}>\n// \t\t\t\t\t\t{cols.map((j) => renderCell(i * props.cols + j))}\n// \t\t\t\t\t</div>\n// \t\t\t\t);\n// \t\t\t})}\n// \t\t</div>\n// \t);\n// }\n// function Game(props) {\n// \tconst [history, setHistory] = useState([]);\n// \tconst [board] = useState({});\n// \tfunction handleClick(i) {\n// \t\tconsole.log(`clicked ${i}`);\n// \t\tconsole.log(board[i]);\n// \t\t// cell i was clicked => we need to filp the status of cells i\n// \t\tif (board[i]) {\n// \t\t\tboard[i] = !board[i];\n// \t\t} else {\n// \t\t\tboard[i] = true;\n// \t\t}\n// \t\tconsole.log(board[i]);\n// \t}\n// \treturn (\n// \t\t<Board\n// \t\t\trows={props.rows}\n// \t\t\tcols={props.cols}\n// \t\t\tonClick={(i) => handleClick(i)}\n// \t\t/>\n// \t);\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 76,\n  columnNumber: 2\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/index.js"],"names":["React","useState","ReactDOM","App","reportWebVitals","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,QAAQ,CAACG,MAAT,eACC,QAAC,KAAD,CAAO,UAAP;AAAA,yBACC,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,QADD,EAICC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJD","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// function Cell(props) {\n// \tconst [clicked, setClicked] = useState(false);\n// \treturn (\n// \t\t<button\n// \t\t\tclassName=\"cell\"\n// \t\t\tonClick={() => {\n// \t\t\t\tprops.onClick();\n// \t\t\t\tsetClicked(!clicked);\n// \t\t\t}}\n// \t\t\tstyle={{\n// \t\t\t\tbackgroundColor: clicked ? 'black' : 'white',\n// \t\t\t}}\n// \t\t></button>\n// \t);\n// }\n\n// function Board(props) {\n// \tfunction renderCell(i) {\n// \t\treturn <Cell onClick={() => props.onClick(i)} key={i} />;\n// \t}\n\n// \tlet rows = [];\n// \tlet cols = [];\n// \tfor (let i = 0; i < props.rows; i++) {\n// \t\trows.push(i);\n// \t}\n// \tfor (let i = 0; i < props.cols; i++) {\n// \t\tcols.push(i);\n// \t}\n\n// \treturn (\n// \t\t<div style={{ margin: '0px auto', maxWidth: '800px' }}>\n// \t\t\t{rows.map((i) => {\n// \t\t\t\treturn (\n// \t\t\t\t\t<div className=\"board-row\" key={`row ${i}`}>\n// \t\t\t\t\t\t{cols.map((j) => renderCell(i * props.cols + j))}\n// \t\t\t\t\t</div>\n// \t\t\t\t);\n// \t\t\t})}\n// \t\t</div>\n// \t);\n// }\n\n// function Game(props) {\n// \tconst [history, setHistory] = useState([]);\n// \tconst [board] = useState({});\n\n// \tfunction handleClick(i) {\n// \t\tconsole.log(`clicked ${i}`);\n// \t\tconsole.log(board[i]);\n// \t\t// cell i was clicked => we need to filp the status of cells i\n// \t\tif (board[i]) {\n// \t\t\tboard[i] = !board[i];\n// \t\t} else {\n// \t\t\tboard[i] = true;\n// \t\t}\n// \t\tconsole.log(board[i]);\n// \t}\n\n// \treturn (\n// \t\t<Board\n// \t\t\trows={props.rows}\n// \t\t\tcols={props.cols}\n// \t\t\tonClick={(i) => handleClick(i)}\n// \t\t/>\n// \t);\n// }\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}