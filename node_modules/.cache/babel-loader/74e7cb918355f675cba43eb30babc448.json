{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\nconst ROWS = HEIGHT / CELL_SIZE;\nconst COLS = HEIGHT / CELL_SIZE;\n\nfunction Cell({\n  x,\n  y\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Cell\",\n    style: {\n      left: CELL_SIZE * x + 1,\n      top: CELL_SIZE * y + 1,\n      width: CELL_SIZE - 1,\n      height: CELL_SIZE - 1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Cell;\n\nfunction Game() {\n  _s();\n\n  // initialize our board\n  let board = makeEmptyBoard(); // states\n\n  let boardRef = /*#__PURE__*/React.createRef();\n  const [cells, setCells] = useState(null); // render\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(board), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      style: {\n        width: WIDTH,\n        height: HEIGHT,\n        backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n      },\n      ref: boardRef,\n      onClick: handleClick,\n      children: cells && cells.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n        x: cell.x,\n        y: cell.y\n      }, `${cell.x} ${cell.y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 35\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n  /**\n   * Return an empty board\n   */\n\n  function makeEmptyBoard() {\n    return new Array(ROWS).fill(new Array(COLS).fill(false));\n  }\n  /**\n   * Returns the offset of the board\n   * @param {import('react').Ref} boardRef\n   */\n\n\n  function getElementOffset(boardRef) {\n    const rect = boardRef.current.getBoundingClientRect();\n    const doc = document.documentElement;\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n  /**\n   * Add or remove a cell on the board\n   * @param {MouseEvent} event\n   */\n\n\n  function handleClick(event) {\n    console.log(board);\n    const elemOffset = getElementOffset(boardRef);\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n    console.log('clicked', x, y);\n    if (x >= 0 && x < COLS && y >= 0 && y < ROWS) board[y][x] = !board[y][x];\n  }\n  /**\n   * Takes the current board and returns the correpondings cells\n   * which is an array of coordinates\n   * @param {Array} board\n   */\n\n\n  function makeCells(board) {\n    let cells = [];\n\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        if (board[y][x]) cells.push({\n          x,\n          y\n        });\n      }\n    }\n\n    console.log('makeCells(board)', cells);\n    return cells;\n  }\n  /**\n   * Takes in the current board and calculates the board for\n   * the next iteration\n   * @param {Array} board\n   */\n\n\n  function nextIteration(board) {\n    let newBoard = makeEmptyBoard();\n  }\n  /**\n   * Calculates the number of neighbors for the cell at {x, y}\n   * @param {Array} board\n   * @param {number} x\n   * @param {number} y\n   */\n\n\n  function numberOfNeighbors(board, x, y) {\n    let neighbors = 0;\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, -1], [0, -1]];\n\n    for (let i = 0; i < dirs.length; i++) {\n      let [offY, offX] = dirs[i];\n\n      let _y = y + offY;\n\n      let _x = x + offX;\n\n      if (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && board[_y][_x]) neighbors++;\n    }\n\n    return neighbors;\n  }\n\n  function randomCells() {\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        board[y][x] = Math.random() >= 0.5;\n      }\n    }\n\n    setCells(makeCells());\n  }\n}\n\n_s(Game, \"MG4Q2tjNL4Hu/y3eGiIxJz2hEH8=\");\n\n_c2 = Game;\nexport default Game;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js"],"names":["React","useState","useEffect","CELL_SIZE","WIDTH","HEIGHT","ROWS","COLS","Cell","x","y","left","top","width","height","Game","board","makeEmptyBoard","boardRef","createRef","cells","setCells","console","log","backgroundSize","handleClick","map","cell","Array","fill","getElementOffset","rect","current","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","event","elemOffset","offsetX","clientX","offsetY","clientY","Math","floor","makeCells","push","nextIteration","newBoard","numberOfNeighbors","neighbors","dirs","i","length","offY","offX","_y","_x","randomCells","random"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Game.css';\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\nconst ROWS = HEIGHT / CELL_SIZE;\nconst COLS = HEIGHT / CELL_SIZE;\n\nfunction Cell({ x, y }) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Cell\"\n\t\t\tstyle={{\n\t\t\t\tleft: CELL_SIZE * x + 1,\n\t\t\t\ttop: CELL_SIZE * y + 1,\n\t\t\t\twidth: CELL_SIZE - 1,\n\t\t\t\theight: CELL_SIZE - 1,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nfunction Game() {\n\t// initialize our board\n\tlet board = makeEmptyBoard();\n\t// states\n\tlet boardRef = React.createRef();\n\tconst [cells, setCells] = useState(null);\n\n\t// render\n\treturn (\n\t\t<>\n\t\t\t{console.log(board)}\n\t\t\t<div\n\t\t\t\tclassName=\"Board\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t\theight: HEIGHT,\n\t\t\t\t\tbackgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n\t\t\t\t}}\n\t\t\t\tref={boardRef}\n\t\t\t\tonClick={handleClick}\n\t\t\t>\n\t\t\t\t{cells && cells.map((cell) => <Cell x={cell.x} y={cell.y} key={`${cell.x} ${cell.y}`} />)}\n\t\t\t</div>\n\t\t</>\n\t);\n\n\t/**\n\t * Return an empty board\n\t */\n\tfunction makeEmptyBoard() {\n\t\treturn new Array(ROWS).fill(new Array(COLS).fill(false));\n\t}\n\n\t/**\n\t * Returns the offset of the board\n\t * @param {import('react').Ref} boardRef\n\t */\n\tfunction getElementOffset(boardRef) {\n\t\tconst rect = boardRef.current.getBoundingClientRect();\n\t\tconst doc = document.documentElement;\n\n\t\treturn {\n\t\t\tx: rect.left + window.pageXOffset - doc.clientLeft,\n\t\t\ty: rect.top + window.pageYOffset - doc.clientTop,\n\t\t};\n\t}\n\n\t/**\n\t * Add or remove a cell on the board\n\t * @param {MouseEvent} event\n\t */\n\tfunction handleClick(event) {\n\t\tconsole.log(board);\n\t\tconst elemOffset = getElementOffset(boardRef);\n\t\tconst offsetX = event.clientX - elemOffset.x;\n\t\tconst offsetY = event.clientY - elemOffset.y;\n\n\t\tconst x = Math.floor(offsetX / CELL_SIZE);\n\t\tconst y = Math.floor(offsetY / CELL_SIZE);\n\n\t\tconsole.log('clicked', x, y);\n\n\t\tif (x >= 0 && x < COLS && y >= 0 && y < ROWS) board[y][x] = !board[y][x];\n\t}\n\n\t/**\n\t * Takes the current board and returns the correpondings cells\n\t * which is an array of coordinates\n\t * @param {Array} board\n\t */\n\tfunction makeCells(board) {\n\t\tlet cells = [];\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tif (board[y][x]) cells.push({ x, y });\n\t\t\t}\n\t\t}\n\t\tconsole.log('makeCells(board)', cells);\n\t\treturn cells;\n\t}\n\n\t/**\n\t * Takes in the current board and calculates the board for\n\t * the next iteration\n\t * @param {Array} board\n\t */\n\tfunction nextIteration(board) {\n\t\tlet newBoard = makeEmptyBoard();\n\t}\n\n\t/**\n\t * Calculates the number of neighbors for the cell at {x, y}\n\t * @param {Array} board\n\t * @param {number} x\n\t * @param {number} y\n\t */\n\tfunction numberOfNeighbors(board, x, y) {\n\t\tlet neighbors = 0;\n\t\tconst dirs = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, 1],\n\t\t\t[1, 1],\n\t\t\t[1, -1],\n\t\t\t[0, -1],\n\t\t];\n\n\t\tfor (let i = 0; i < dirs.length; i++) {\n\t\t\tlet [offY, offX] = dirs[i];\n\t\t\tlet _y = y + offY;\n\t\t\tlet _x = x + offX;\n\n\t\t\tif (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && board[_y][_x]) neighbors++;\n\t\t}\n\t\treturn neighbors;\n\t}\n\n\tfunction randomCells() {\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tboard[y][x] = Math.random() >= 0.5;\n\t\t\t}\n\t\t}\n\t\tsetCells(makeCells());\n\t}\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}