{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Game.css';\nimport HistoryStack from './HistoryStack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CELL_SIZE = 20;\nconst WIDTH = 400;\nconst HEIGHT = 400;\nconst ROWS = HEIGHT / CELL_SIZE;\nconst COLS = HEIGHT / CELL_SIZE;\n\nfunction Cell({\n  x,\n  y\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Cell\",\n    style: {\n      left: CELL_SIZE * x + 1,\n      top: CELL_SIZE * y + 1,\n      width: CELL_SIZE - 1,\n      height: CELL_SIZE - 1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Cell;\n\nfunction Game() {\n  _s();\n\n  // initialize our board\n  const [board] = useState(makeEmptyBoard()); // states\n\n  let boardRef = /*#__PURE__*/React.createRef();\n  let prevBtn = /*#__PURE__*/React.createRef();\n  const [cells, setCells] = useState([]);\n  const [HISTORY] = useState(new HistoryStack(5));\n  useEffect(() => {\n    HISTORY.size === 0 ? prevBtn.current.disabled = true : prevBtn.current.disabled = false;\n  }, [HISTORY]); // render\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      style: {\n        width: WIDTH,\n        height: HEIGHT,\n        backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n      },\n      ref: boardRef,\n      onClick: handleClick,\n      children: cells.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n        x: cell.x,\n        y: cell.y\n      }, `${cell.x} ${cell.y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        width: WIDTH\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        style: {\n          disabled: HISTORY.size === 0 ? 'red' : ''\n        },\n        ref: prevBtn,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n  /**\n   * Return an empty board\n   */\n\n  function makeEmptyBoard() {\n    let result = [];\n\n    for (let y = 0; y < ROWS; y++) {\n      result.push([]);\n\n      for (let x = 0; x < COLS; x++) {\n        result[y].push(false);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Returns the offset of the board\n   * @param {import('react').Ref} boardRef\n   */\n\n\n  function getElementOffset() {\n    const rect = boardRef.current.getBoundingClientRect();\n    const doc = document.documentElement;\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n  /**\n   * Add or remove a cell on the board\n   * @param {MouseEvent} event\n   */\n\n\n  function handleClick(event) {\n    const elemOffset = getElementOffset(boardRef);\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n    if (x >= 0 && x < COLS && y >= 0 && y < ROWS) board[y][x] = !board[y][x];\n    setCells(makeCells());\n  }\n  /**\n   * Takes the current board and returns the correpondings cells\n   * which is an array of coordinates\n   * @param {Array} board\n   */\n\n\n  function makeCells() {\n    let cells = [];\n\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        if (board[y][x]) cells.push({\n          x,\n          y\n        });\n      }\n    }\n\n    return cells;\n  }\n  /**\n   * Takes in the current board and calculates the board for\n   * the next iteration\n   * @param {Array} board\n   */\n\n\n  function nextIteration(board) {\n    let newBoard = makeEmptyBoard();\n\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        let neighbors = numberOfNeighbors(x, y);\n\n        if (board[y][x]) {\n          newBoard[y][x] = neighbors === 2 || neighbors === 3 ? true : false;\n        } else {\n          if (!board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    board = newBoard;\n    setCells(makeCells());\n    HISTORY.push(board);\n  }\n  /**\n   * Calculates the number of neighbors for the cell at {x, y}\n   * @param {Array} board\n   * @param {number} x\n   * @param {number} y\n   */\n\n\n  function numberOfNeighbors(x, y) {\n    let neighbors = 0;\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, -1], [0, -1]];\n\n    for (let i = 0; i < dirs.length; i++) {\n      let [offY, offX] = dirs[i];\n\n      let _y = y + offY;\n\n      let _x = x + offX;\n\n      if (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && board[_y][_x]) neighbors++;\n    }\n\n    return neighbors;\n  }\n\n  function randomCells() {\n    for (let y = 0; y < ROWS; y++) {\n      for (let x = 0; x < COLS; x++) {\n        board[y][x] = Math.random() >= 0.5;\n      }\n    }\n\n    return makeCells();\n  }\n}\n\n_s(Game, \"vhwUNGXn73UPQdHDLIUAxMHu3tg=\");\n\n_c2 = Game;\nexport default Game;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js"],"names":["React","useEffect","useState","HistoryStack","CELL_SIZE","WIDTH","HEIGHT","ROWS","COLS","Cell","x","y","left","top","width","height","Game","board","makeEmptyBoard","boardRef","createRef","prevBtn","cells","setCells","HISTORY","size","current","disabled","backgroundSize","handleClick","map","cell","result","push","getElementOffset","rect","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","event","elemOffset","offsetX","clientX","offsetY","clientY","Math","floor","makeCells","nextIteration","newBoard","neighbors","numberOfNeighbors","dirs","i","length","offY","offX","_y","_x","randomCells","random"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Game.css';\nimport HistoryStack from './HistoryStack';\n\nconst CELL_SIZE = 20;\nconst WIDTH = 400;\nconst HEIGHT = 400;\nconst ROWS = HEIGHT / CELL_SIZE;\nconst COLS = HEIGHT / CELL_SIZE;\n\nfunction Cell({ x, y }) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Cell\"\n\t\t\tstyle={{\n\t\t\t\tleft: CELL_SIZE * x + 1,\n\t\t\t\ttop: CELL_SIZE * y + 1,\n\t\t\t\twidth: CELL_SIZE - 1,\n\t\t\t\theight: CELL_SIZE - 1,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nfunction Game() {\n\t// initialize our board\n\tconst [board] = useState(makeEmptyBoard());\n\t// states\n\tlet boardRef = React.createRef();\n\tlet prevBtn = React.createRef();\n\tconst [cells, setCells] = useState([]);\n\tconst [HISTORY] = useState(new HistoryStack(5));\n\n\tuseEffect(() => {\n\t\tHISTORY.size === 0 ? (prevBtn.current.disabled = true) : (prevBtn.current.disabled = false);\n\t}, [HISTORY]);\n\n\t// render\n\treturn (\n\t\t<>\n\t\t\t<div\n\t\t\t\tclassName=\"Board\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t\theight: HEIGHT,\n\t\t\t\t\tbackgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n\t\t\t\t}}\n\t\t\t\tref={boardRef}\n\t\t\t\tonClick={handleClick}\n\t\t\t>\n\t\t\t\t{cells.map((cell) => (\n\t\t\t\t\t<Cell x={cell.x} y={cell.y} key={`${cell.x} ${cell.y}`} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"controls\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisabled: HISTORY.size === 0 ? 'red' : '',\n\t\t\t\t\t}}\n\t\t\t\t\tref={prevBtn}\n\t\t\t\t>\n\t\t\t\t\tPrev\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\">Next</button>\n\t\t\t\t<button className=\"btn\">Reset</button>\n\t\t\t</div>\n\t\t</>\n\t);\n\n\t/**\n\t * Return an empty board\n\t */\n\tfunction makeEmptyBoard() {\n\t\tlet result = [];\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tresult.push([]);\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tresult[y].push(false);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the offset of the board\n\t * @param {import('react').Ref} boardRef\n\t */\n\tfunction getElementOffset() {\n\t\tconst rect = boardRef.current.getBoundingClientRect();\n\t\tconst doc = document.documentElement;\n\n\t\treturn {\n\t\t\tx: rect.left + window.pageXOffset - doc.clientLeft,\n\t\t\ty: rect.top + window.pageYOffset - doc.clientTop,\n\t\t};\n\t}\n\n\t/**\n\t * Add or remove a cell on the board\n\t * @param {MouseEvent} event\n\t */\n\tfunction handleClick(event) {\n\t\tconst elemOffset = getElementOffset(boardRef);\n\t\tconst offsetX = event.clientX - elemOffset.x;\n\t\tconst offsetY = event.clientY - elemOffset.y;\n\n\t\tconst x = Math.floor(offsetX / CELL_SIZE);\n\t\tconst y = Math.floor(offsetY / CELL_SIZE);\n\n\t\tif (x >= 0 && x < COLS && y >= 0 && y < ROWS) board[y][x] = !board[y][x];\n\t\tsetCells(makeCells());\n\t}\n\n\t/**\n\t * Takes the current board and returns the correpondings cells\n\t * which is an array of coordinates\n\t * @param {Array} board\n\t */\n\tfunction makeCells() {\n\t\tlet cells = [];\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tif (board[y][x]) cells.push({ x, y });\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t}\n\n\t/**\n\t * Takes in the current board and calculates the board for\n\t * the next iteration\n\t * @param {Array} board\n\t */\n\tfunction nextIteration(board) {\n\t\tlet newBoard = makeEmptyBoard();\n\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tlet neighbors = numberOfNeighbors(x, y);\n\t\t\t\tif (board[y][x]) {\n\t\t\t\t\tnewBoard[y][x] = neighbors === 2 || neighbors === 3 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tif (!board[y][x] && neighbors === 3) {\n\t\t\t\t\t\tnewBoard[y][x] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tboard = newBoard;\n\t\tsetCells(makeCells());\n\t\tHISTORY.push(board);\n\t}\n\n\t/**\n\t * Calculates the number of neighbors for the cell at {x, y}\n\t * @param {Array} board\n\t * @param {number} x\n\t * @param {number} y\n\t */\n\tfunction numberOfNeighbors(x, y) {\n\t\tlet neighbors = 0;\n\t\tconst dirs = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, 1],\n\t\t\t[1, 1],\n\t\t\t[1, -1],\n\t\t\t[0, -1],\n\t\t];\n\n\t\tfor (let i = 0; i < dirs.length; i++) {\n\t\t\tlet [offY, offX] = dirs[i];\n\t\t\tlet _y = y + offY;\n\t\t\tlet _x = x + offX;\n\n\t\t\tif (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && board[_y][_x]) neighbors++;\n\t\t}\n\t\treturn neighbors;\n\t}\n\n\tfunction randomCells() {\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tboard[y][x] = Math.random() >= 0.5;\n\t\t\t}\n\t\t}\n\t\treturn makeCells();\n\t}\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}