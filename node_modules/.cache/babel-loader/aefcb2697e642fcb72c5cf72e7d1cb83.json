{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Game.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport '../styles/Game.css';\nimport HistoryStack from '../utilities/HistoryStack';\nimport Tips from './Tips.js';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game(props) {\n  _s();\n\n  const prevBtn = /*#__PURE__*/React.createRef();\n  const [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n  const [cells, setCells] = useState([]);\n  const [prev, setPrev] = useState(false);\n  const [history] = useState(new HistoryStack(props.steps));\n  const [running, setRunning] = useState(false); // update the cells whenever the board gets updated\n\n  useEffect(() => {\n    // do not recalculate the cells again\n    if (!prev) {\n      setCells(makeCells());\n    }\n\n    setPrev(false);\n  }, [board]); // update the `Prev` button status whenever cells get updated\n\n  useEffect(() => {\n    if (history.size === 0) {\n      prevBtn.current.disabled = true;\n    } else {\n      prevBtn.current.disabled = false;\n    }\n  }, [cells]);\n  useInterval(() => {\n    getNextBoard();\n  }, running ? 500 : null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tips, {\n      width: props.size * props.cols,\n      steps: props.steps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      cells: cells,\n      size: props.size,\n      rows: props.rows,\n      cols: props.cols,\n      onClick: (x, y) => handleClick(x, y)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        width: props.size * props.cols\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        ref: prevBtn,\n        onClick: getPrevBoard,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: getNextBoard,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: toggleRun,\n        children: running ? 'Pause' : 'Run'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n\n  function handleClick(x, y) {\n    if (x >= 0 && x < props.cols && y >= 0 && y <= props.rows) {\n      board[y][x] = !board[y][x];\n    }\n\n    setCells(makeCells());\n  }\n\n  function makeCells() {\n    let cells = [];\n\n    for (let y = 0; y < props.rows; y++) {\n      for (let x = 0; x < props.cols; x++) {\n        if (board[y][x]) cells.push({\n          x,\n          y,\n          color: randomColor()\n        });\n      }\n    }\n\n    return cells;\n  }\n\n  function getNextBoard() {\n    history.push({\n      cells: cells.slice(),\n      board: board.map(row => row.slice())\n    });\n    let newBoard = board.map(row => row.slice());\n\n    for (let y = 0; y < props.rows; y++) {\n      for (let x = 0; x < props.cols; x++) {\n        let neighbors = numberOfNeighbors(board, x, y);\n\n        if (newBoard[y][x]) {\n          newBoard[y][x] = neighbors === 2 || neighbors === 3;\n        } else {\n          if (!board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    setBoard(newBoard);\n  }\n\n  function getPrevBoard() {\n    if (history.size > 0) {\n      let {\n        cells,\n        board\n      } = history.pop();\n      setPrev(true);\n      setBoard(board);\n      setCells(cells);\n    }\n  }\n\n  function toggleRun() {\n    setRunning(running => !running);\n  }\n\n  function reset() {\n    setRunning(false);\n    setBoard(makeEmptyBoard(props.rows, props.cols));\n    setCells([]);\n    history.clear();\n  }\n\n  function numberOfNeighbors(b, x, y) {\n    let neighbors = 0;\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\n    for (let [offY, offX] of dirs) {\n      let _y = y + offY;\n\n      let _x = x + offX;\n\n      if (_x >= 0 && _x < props.cols && _y >= 0 && _y < props.rows && b[_y][_x]) neighbors++;\n    }\n\n    return neighbors;\n  }\n} // utilities\n\n_s(Game, \"eeGkcQm0Pz+MwkgH9WEoFUcjwuA=\", false, function () {\n  return [useInterval];\n});\n\n_c = Game;\n\nfunction randomColor() {\n  const rc = () => 30 + Math.floor(Math.random() * 200);\n\n  return {\n    r: rc(),\n    g: rc(),\n    b: rc()\n  };\n}\n\nfunction makeEmptyBoard(rows, cols) {\n  let results = [];\n\n  for (let y = 0; y < rows; y++) {\n    results.push([]);\n\n    for (let x = 0; x < cols; x++) {\n      results[y].push(false);\n    }\n  }\n\n  return results;\n}\n\nfunction useInterval(callback, delay) {\n  _s2();\n\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n_s2(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/components/Game.js"],"names":["React","useEffect","useState","useRef","HistoryStack","Tips","Board","Game","props","prevBtn","createRef","board","setBoard","makeEmptyBoard","rows","cols","cells","setCells","prev","setPrev","history","steps","running","setRunning","makeCells","size","current","disabled","useInterval","getNextBoard","x","y","handleClick","width","getPrevBoard","toggleRun","reset","push","color","randomColor","slice","map","row","newBoard","neighbors","numberOfNeighbors","pop","clear","b","dirs","offY","offX","_y","_x","rc","Math","floor","random","r","g","results","callback","delay","savedCallback","tick","id","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport '../styles/Game.css';\nimport HistoryStack from '../utilities/HistoryStack';\nimport Tips from './Tips.js';\nimport Board from './Board';\n\nexport default function Game(props) {\n\tconst prevBtn = React.createRef();\n\tconst [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n\tconst [cells, setCells] = useState([]);\n\tconst [prev, setPrev] = useState(false);\n\tconst [history] = useState(new HistoryStack(props.steps));\n\tconst [running, setRunning] = useState(false);\n\n\t// update the cells whenever the board gets updated\n\tuseEffect(() => {\n\t\t// do not recalculate the cells again\n\t\tif (!prev) {\n\t\t\tsetCells(makeCells());\n\t\t}\n\t\tsetPrev(false);\n\t}, [board]);\n\n\t// update the `Prev` button status whenever cells get updated\n\tuseEffect(() => {\n\t\tif (history.size === 0) {\n\t\t\tprevBtn.current.disabled = true;\n\t\t} else {\n\t\t\tprevBtn.current.disabled = false;\n\t\t}\n\t}, [cells]);\n\n\tuseInterval(\n\t\t() => {\n\t\t\tgetNextBoard();\n\t\t},\n\t\trunning ? 500 : null\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Tips width={props.size * props.cols} steps={props.steps} />\n\t\t\t<Board\n\t\t\t\tcells={cells}\n\t\t\t\tsize={props.size}\n\t\t\t\trows={props.rows}\n\t\t\t\tcols={props.cols}\n\t\t\t\tonClick={(x, y) => handleClick(x, y)}\n\t\t\t/>\n\t\t\t<div className=\"controls\" style={{ width: props.size * props.cols }}>\n\t\t\t\t<button className=\"btn\" ref={prevBtn} onClick={getPrevBoard}>\n\t\t\t\t\tPrev\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={getNextBoard}>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={toggleRun}>\n\t\t\t\t\t{running ? 'Pause' : 'Run'}\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={reset}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</>\n\t);\n\n\tfunction handleClick(x, y) {\n\t\tif (x >= 0 && x < props.cols && y >= 0 && y <= props.rows) {\n\t\t\tboard[y][x] = !board[y][x];\n\t\t}\n\t\tsetCells(makeCells());\n\t}\n\n\tfunction makeCells() {\n\t\tlet cells = [];\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tif (board[y][x]) cells.push({ x, y, color: randomColor() });\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t}\n\n\tfunction getNextBoard() {\n\t\thistory.push({\n\t\t\tcells: cells.slice(),\n\t\t\tboard: board.map((row) => row.slice()),\n\t\t});\n\t\tlet newBoard = board.map((row) => row.slice());\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tlet neighbors = numberOfNeighbors(board, x, y);\n\t\t\t\tif (newBoard[y][x]) {\n\t\t\t\t\tnewBoard[y][x] = neighbors === 2 || neighbors === 3;\n\t\t\t\t} else {\n\t\t\t\t\tif (!board[y][x] && neighbors === 3) {\n\t\t\t\t\t\tnewBoard[y][x] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetBoard(newBoard);\n\t}\n\n\tfunction getPrevBoard() {\n\t\tif (history.size > 0) {\n\t\t\tlet { cells, board } = history.pop();\n\t\t\tsetPrev(true);\n\t\t\tsetBoard(board);\n\t\t\tsetCells(cells);\n\t\t}\n\t}\n\n\tfunction toggleRun() {\n\t\tsetRunning((running) => !running);\n\t}\n\n\tfunction reset() {\n\t\tsetRunning(false);\n\t\tsetBoard(makeEmptyBoard(props.rows, props.cols));\n\t\tsetCells([]);\n\t\thistory.clear();\n\t}\n\n\tfunction numberOfNeighbors(b, x, y) {\n\t\tlet neighbors = 0;\n\t\tconst dirs = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, -1],\n\t\t\t[0, 1],\n\t\t\t[1, -1],\n\t\t\t[1, 0],\n\t\t\t[1, 1],\n\t\t];\n\n\t\tfor (let [offY, offX] of dirs) {\n\t\t\tlet _y = y + offY;\n\t\t\tlet _x = x + offX;\n\n\t\t\tif (_x >= 0 && _x < props.cols && _y >= 0 && _y < props.rows && b[_y][_x])\n\t\t\t\tneighbors++;\n\t\t}\n\t\treturn neighbors;\n\t}\n}\n\n// utilities\nfunction randomColor() {\n\tconst rc = () => 30 + Math.floor(Math.random() * 200);\n\treturn {\n\t\tr: rc(),\n\t\tg: rc(),\n\t\tb: rc(),\n\t};\n}\n\nfunction makeEmptyBoard(rows, cols) {\n\tlet results = [];\n\tfor (let y = 0; y < rows; y++) {\n\t\tresults.push([]);\n\t\tfor (let x = 0; x < cols; x++) {\n\t\t\tresults[y].push(false);\n\t\t}\n\t}\n\treturn results;\n}\n\nfunction useInterval(callback, delay) {\n\tconst savedCallback = useRef();\n\n\t// Remember the latest callback.\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\t// Set up the interval.\n\tuseEffect(() => {\n\t\tfunction tick() {\n\t\t\tsavedCallback.current();\n\t\t}\n\t\tif (delay !== null) {\n\t\t\tlet id = setInterval(tick, delay);\n\t\t\treturn () => clearInterval(id);\n\t\t}\n\t}, [delay]);\n}\n"]},"metadata":{},"sourceType":"module"}