{"ast":null,"code":"import _construct from\"/Users/ryandi/Documents/projects/react/game-of-life-functional/node_modules/@babel/runtime/helpers/esm/construct\";import _toConsumableArray from\"/Users/ryandi/Documents/projects/react/game-of-life-functional/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/ryandi/Documents/projects/react/game-of-life-functional/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import'./Game.css';import HistoryStack from'./HistoryStack';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var CELL_SIZE=20;var WIDTH=400;var HEIGHT=400;var ROWS=HEIGHT/CELL_SIZE;var COLS=HEIGHT/CELL_SIZE;var BOARD=makeEmptyBoard();function Cell(_ref){var x=_ref.x,y=_ref.y;return/*#__PURE__*/_jsx(\"div\",{className:\"Cell\",style:{left:CELL_SIZE*x+1,top:CELL_SIZE*y+1,width:CELL_SIZE-1,height:CELL_SIZE-1}});}export default function Game(){// states\nvar boardRef=/*#__PURE__*/React.createRef();var prevBtn=/*#__PURE__*/React.createRef();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cells=_useState2[0],setCells=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),disablePrev=_useState4[0],setDisablePrev=_useState4[1];var _useState5=useState(new HistoryStack(10)),_useState6=_slicedToArray(_useState5,1),HISTORY=_useState6[0];useEffect(function(){prevBtn.current.disabled=disablePrev;},[disablePrev]);// render\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"Board\",style:{width:WIDTH,height:HEIGHT,backgroundSize:\"\".concat(CELL_SIZE,\"px \").concat(CELL_SIZE,\"px\")},ref:boardRef,onClick:handleClick,children:cells.map(function(cell){return/*#__PURE__*/_jsx(Cell,{x:cell.x,y:cell.y},\"\".concat(cell.x,\" \").concat(cell.y));})}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",style:{width:WIDTH},children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn\",ref:prevBtn,onClick:getPrevBoard,children:\"Prev\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:getNextBoard,children:\"Next\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:reset,children:\"Reset\"}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'left'},children:/*#__PURE__*/_jsx(\"p\",{children:\"Click the board to add or remove a cell. Click \\\"Next\\\" to get the next iteration and click \\\"Prev\\\" to go back. You can go back up to 10 steps. Finally, click \\\"Reset\\\" to simply clear the board and start over.\"})})]})]});/**\n\t * Add or remove a cell on the board\n\t * @param {MouseEvent} event\n\t */function handleClick(event){var elemOffset=getElementOffset(boardRef);var offsetX=event.clientX-elemOffset.x;var offsetY=event.clientY-elemOffset.y;var x=Math.floor(offsetX/CELL_SIZE);var y=Math.floor(offsetY/CELL_SIZE);if(x>=0&&x<COLS&&y>=0&&y<ROWS)BOARD[y][x]=!BOARD[y][x];setCells(makeCells(BOARD));}function getNextBoard(){HISTORY.push(_construct(Array,_toConsumableArray(BOARD)));var newBoard=makeEmptyBoard();for(var y=0;y<ROWS;y++){for(var x=0;x<COLS;x++){var neighbors=numberOfNeighbors(x,y);if(BOARD[y][x]){newBoard[y][x]=neighbors===2||neighbors===3?true:false;}else{if(!BOARD[y][x]&&neighbors===3){newBoard[y][x]=true;}}}}BOARD=newBoard;setCells(makeCells(BOARD));setDisablePrev(false);}function getPrevBoard(){var b=HISTORY.pop();if(b){BOARD=b;setCells(makeCells(BOARD));}if(HISTORY.size===0)setDisablePrev(true);}function reset(){HISTORY.clear();BOARD=makeEmptyBoard();setDisablePrev(true);setCells([]);}function randomCells(){for(var y=0;y<ROWS;y++){for(var x=0;x<COLS;x++){BOARD[y][x]=Math.random()>=0.5;}}return makeCells(BOARD);}}// utility functions for boards and cells\n/**\n * Takes a game state board and returns the correpondings cells\n * which is an array of coordinates\n * @param {Array} b\n */function makeCells(b){var cells=[];for(var y=0;y<ROWS;y++){for(var x=0;x<COLS;x++){if(b[y][x])cells.push({x:x,y:y});}}return cells;}/**\n * Return an empty board\n */function makeEmptyBoard(){var result=[];for(var y=0;y<ROWS;y++){result.push([]);for(var x=0;x<COLS;x++){result[y].push(false);}}return result;}/**\n * Calculates the number of neighbors for the cell at {x, y}\n * @param {Array} board\n * @param {number} x\n * @param {number} y\n */function numberOfNeighbors(x,y){var neighbors=0;var dirs=[[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,-1],[0,-1]];for(var i=0;i<dirs.length;i++){var _dirs$i=_slicedToArray(dirs[i],2),offY=_dirs$i[0],offX=_dirs$i[1];var _y=y+offY;var _x=x+offX;if(_x>=0&&_x<COLS&&_y>=0&&_y<ROWS&&BOARD[_y][_x])neighbors++;}return neighbors;}/**\n * Returns the offset of the board\n * @param {import('react').Ref} boardRef\n */function getElementOffset(boardRef){var rect=boardRef.current.getBoundingClientRect();var doc=document.documentElement;return{x:rect.left+window.pageXOffset-doc.clientLeft,y:rect.top+window.pageYOffset-doc.clientTop};}","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/Game.js"],"names":["React","useEffect","useState","HistoryStack","CELL_SIZE","WIDTH","HEIGHT","ROWS","COLS","BOARD","makeEmptyBoard","Cell","x","y","left","top","width","height","Game","boardRef","createRef","prevBtn","cells","setCells","disablePrev","setDisablePrev","HISTORY","current","disabled","backgroundSize","handleClick","map","cell","getPrevBoard","getNextBoard","reset","textAlign","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","makeCells","push","Array","newBoard","neighbors","numberOfNeighbors","b","pop","size","clear","randomCells","random","result","dirs","i","length","offY","offX","_y","_x","rect","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Game.css';\nimport HistoryStack from './HistoryStack';\n\nconst CELL_SIZE = 20;\nconst WIDTH = 400;\nconst HEIGHT = 400;\nconst ROWS = HEIGHT / CELL_SIZE;\nconst COLS = HEIGHT / CELL_SIZE;\nlet BOARD = makeEmptyBoard();\n\nfunction Cell({ x, y }) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Cell\"\n\t\t\tstyle={{\n\t\t\t\tleft: CELL_SIZE * x + 1,\n\t\t\t\ttop: CELL_SIZE * y + 1,\n\t\t\t\twidth: CELL_SIZE - 1,\n\t\t\t\theight: CELL_SIZE - 1,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nexport default function Game() {\n\t// states\n\tlet boardRef = React.createRef();\n\tlet prevBtn = React.createRef();\n\tconst [cells, setCells] = useState([]);\n\tconst [disablePrev, setDisablePrev] = useState(true);\n\tconst [HISTORY] = useState(new HistoryStack(10));\n\n\tuseEffect(() => {\n\t\tprevBtn.current.disabled = disablePrev;\n\t}, [disablePrev]);\n\n\t// render\n\treturn (\n\t\t<>\n\t\t\t<div\n\t\t\t\tclassName=\"Board\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t\theight: HEIGHT,\n\t\t\t\t\tbackgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n\t\t\t\t}}\n\t\t\t\tref={boardRef}\n\t\t\t\tonClick={handleClick}\n\t\t\t>\n\t\t\t\t{cells.map((cell) => (\n\t\t\t\t\t<Cell x={cell.x} y={cell.y} key={`${cell.x} ${cell.y}`} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"controls\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: WIDTH,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<button className=\"btn\" ref={prevBtn} onClick={getPrevBoard}>\n\t\t\t\t\tPrev\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={getNextBoard}>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={reset}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextAlign: 'left',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tClick the board to add or remove a cell. Click \"Next\" to get the next iteration and click \"Prev\" to go back.\n\t\t\t\t\t\tYou can go back up to 10 steps. Finally, click \"Reset\" to simply clear the board and start over.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n\n\t/**\n\t * Add or remove a cell on the board\n\t * @param {MouseEvent} event\n\t */\n\tfunction handleClick(event) {\n\t\tconst elemOffset = getElementOffset(boardRef);\n\t\tconst offsetX = event.clientX - elemOffset.x;\n\t\tconst offsetY = event.clientY - elemOffset.y;\n\n\t\tconst x = Math.floor(offsetX / CELL_SIZE);\n\t\tconst y = Math.floor(offsetY / CELL_SIZE);\n\n\t\tif (x >= 0 && x < COLS && y >= 0 && y < ROWS) BOARD[y][x] = !BOARD[y][x];\n\t\tsetCells(makeCells(BOARD));\n\t}\n\n\tfunction getNextBoard() {\n\t\tHISTORY.push(new Array(...BOARD));\n\t\tlet newBoard = makeEmptyBoard();\n\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tlet neighbors = numberOfNeighbors(x, y);\n\t\t\t\tif (BOARD[y][x]) {\n\t\t\t\t\tnewBoard[y][x] = neighbors === 2 || neighbors === 3 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tif (!BOARD[y][x] && neighbors === 3) {\n\t\t\t\t\t\tnewBoard[y][x] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tBOARD = newBoard;\n\t\tsetCells(makeCells(BOARD));\n\t\tsetDisablePrev(false);\n\t}\n\n\tfunction getPrevBoard() {\n\t\tlet b = HISTORY.pop();\n\t\tif (b) {\n\t\t\tBOARD = b;\n\t\t\tsetCells(makeCells(BOARD));\n\t\t}\n\t\tif (HISTORY.size === 0) setDisablePrev(true);\n\t}\n\n\tfunction reset() {\n\t\tHISTORY.clear();\n\t\tBOARD = makeEmptyBoard();\n\t\tsetDisablePrev(true);\n\t\tsetCells([]);\n\t}\n\n\tfunction randomCells() {\n\t\tfor (let y = 0; y < ROWS; y++) {\n\t\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\t\tBOARD[y][x] = Math.random() >= 0.5;\n\t\t\t}\n\t\t}\n\t\treturn makeCells(BOARD);\n\t}\n}\n\n// utility functions for boards and cells\n\n/**\n * Takes a game state board and returns the correpondings cells\n * which is an array of coordinates\n * @param {Array} b\n */\nfunction makeCells(b) {\n\tlet cells = [];\n\tfor (let y = 0; y < ROWS; y++) {\n\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\tif (b[y][x]) cells.push({ x, y });\n\t\t}\n\t}\n\treturn cells;\n}\n\n/**\n * Return an empty board\n */\nfunction makeEmptyBoard() {\n\tlet result = [];\n\tfor (let y = 0; y < ROWS; y++) {\n\t\tresult.push([]);\n\t\tfor (let x = 0; x < COLS; x++) {\n\t\t\tresult[y].push(false);\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Calculates the number of neighbors for the cell at {x, y}\n * @param {Array} board\n * @param {number} x\n * @param {number} y\n */\nfunction numberOfNeighbors(x, y) {\n\tlet neighbors = 0;\n\tconst dirs = [\n\t\t[-1, -1],\n\t\t[-1, 0],\n\t\t[-1, 1],\n\t\t[0, 1],\n\t\t[1, 1],\n\t\t[1, -1],\n\t\t[0, -1],\n\t];\n\n\tfor (let i = 0; i < dirs.length; i++) {\n\t\tlet [offY, offX] = dirs[i];\n\t\tlet _y = y + offY;\n\t\tlet _x = x + offX;\n\n\t\tif (_x >= 0 && _x < COLS && _y >= 0 && _y < ROWS && BOARD[_y][_x]) neighbors++;\n\t}\n\treturn neighbors;\n}\n\n/**\n * Returns the offset of the board\n * @param {import('react').Ref} boardRef\n */\nfunction getElementOffset(boardRef) {\n\tconst rect = boardRef.current.getBoundingClientRect();\n\tconst doc = document.documentElement;\n\n\treturn {\n\t\tx: rect.left + window.pageXOffset - doc.clientLeft,\n\t\ty: rect.top + window.pageYOffset - doc.clientTop,\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}