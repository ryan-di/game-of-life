{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/NewGame.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './NewGame.css';\nimport HistoryStack from './HistoryStack';\nimport Tips from './Tips';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cell(props) {\n  _s();\n\n  let left = props.size * props.x + 1;\n  let top = props.size * props.y + 1;\n  let size = props.size - 1;\n  const [color] = useState({\n    r: randomColor(),\n    g: randomColor(),\n    b: randomColor()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Cell\",\n    style: {\n      left,\n      top,\n      width: size,\n      height: size,\n      backgroundColor: `rgb(${color.r}, ${color.g}, ${color.b})`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Cell, \"h0c2Tm5rhE0OxFEESagAqh7M8bM=\");\n\n_c = Cell;\nexport default function Board(props) {\n  _s2();\n\n  // props.rows, props.cols, props.size\n  let boardRef = /*#__PURE__*/React.createRef();\n  const [cells, setCells] = useState([]);\n  const [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    style: {\n      width: props.size * props.cols,\n      height: props.size * props.rows,\n      backgroundSize: `${props.size}px ${props.size}px`\n    },\n    ref: boardRef,\n    onClick: handleClick,\n    children: cells.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n      x: cell.x,\n      y: cell.y,\n      size: props.size\n    }, `${cell.y}, ${cell.x}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n  /**\n   *\n   * @param {MouseEvent} event\n   */\n\n  function handleClick(event) {\n    const {\n      x,\n      y\n    } = getClickPosition(event);\n    if (x >= 0 && x < props.cols && y >= 0 && y <= props.rows) board[y][x] = !board[y][x];\n    setCells(makeCellsFromBoard(board));\n  }\n\n  function makeCellsFromBoard(board) {\n    let cells = [];\n\n    for (let y = 0; y < props.rows; y++) {\n      for (let x = 0; x < props.cols; x++) {\n        if (board[y][x]) cells.push({\n          x,\n          y\n        });\n      }\n    }\n\n    return cells;\n  }\n  /**\n   *\n   * @param {MouseEvent} event\n   */\n\n\n  function getClickPosition(event) {\n    const rect = boardRef.current.getBoundingClientRect();\n    let offX, offY;\n    offX = clientX - rect.left;\n    offY = event.clientY - rect.top;\n    const x = Math.floor(offX / props.size);\n    const y = Math.floor(offY / props.size);\n    return {\n      x,\n      y\n    };\n  }\n} // utilities\n\n_s2(Board, \"SzVR037ZbjOIHLs8r0t5fnxMUPg=\");\n\n_c2 = Board;\n\nfunction randomColor() {\n  return 30 + Math.floor(Math.random() * 200);\n}\n\nfunction makeEmptyBoard(rows, cols) {\n  let results = [];\n\n  for (let y = 0; y < rows; y++) {\n    results.push([]);\n\n    for (let x = 0; x < cols; x++) {\n      results[y].push(false);\n    }\n  }\n\n  return results;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/NewGame.js"],"names":["React","useState","HistoryStack","Tips","Cell","props","left","size","x","top","y","color","r","randomColor","g","b","width","height","backgroundColor","Board","boardRef","createRef","cells","setCells","board","setBoard","makeEmptyBoard","rows","cols","backgroundSize","handleClick","map","cell","event","getClickPosition","makeCellsFromBoard","push","rect","current","getBoundingClientRect","offX","offY","clientX","clientY","Math","floor","random","results"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './NewGame.css';\nimport HistoryStack from './HistoryStack';\nimport Tips from './Tips';\n\nfunction Cell(props) {\n\tlet left = props.size * props.x + 1;\n\tlet top = props.size * props.y + 1;\n\tlet size = props.size - 1;\n\tconst [color] = useState({\n\t\tr: randomColor(),\n\t\tg: randomColor(),\n\t\tb: randomColor(),\n\t});\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Cell\"\n\t\t\tstyle={{\n\t\t\t\tleft,\n\t\t\t\ttop,\n\t\t\t\twidth: size,\n\t\t\t\theight: size,\n\t\t\t\tbackgroundColor: `rgb(${color.r}, ${color.g}, ${color.b})`,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nexport default function Board(props) {\n\t// props.rows, props.cols, props.size\n\tlet boardRef = React.createRef();\n\tconst [cells, setCells] = useState([]);\n\tconst [board, setBoard] = useState(makeEmptyBoard(props.rows, props.cols));\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Board\"\n\t\t\tstyle={{\n\t\t\t\twidth: props.size * props.cols,\n\t\t\t\theight: props.size * props.rows,\n\t\t\t\tbackgroundSize: `${props.size}px ${props.size}px`,\n\t\t\t}}\n\t\t\tref={boardRef}\n\t\t\tonClick={handleClick}\n\t\t>\n\t\t\t{cells.map((cell) => (\n\t\t\t\t<Cell\n\t\t\t\t\tx={cell.x}\n\t\t\t\t\ty={cell.y}\n\t\t\t\t\tsize={props.size}\n\t\t\t\t\tkey={`${cell.y}, ${cell.x}`}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n\n\t/**\n\t *\n\t * @param {MouseEvent} event\n\t */\n\tfunction handleClick(event) {\n\t\tconst { x, y } = getClickPosition(event);\n\n\t\tif (x >= 0 && x < props.cols && y >= 0 && y <= props.rows)\n\t\t\tboard[y][x] = !board[y][x];\n\t\tsetCells(makeCellsFromBoard(board));\n\t}\n\n\tfunction makeCellsFromBoard(board) {\n\t\tlet cells = [];\n\t\tfor (let y = 0; y < props.rows; y++) {\n\t\t\tfor (let x = 0; x < props.cols; x++) {\n\t\t\t\tif (board[y][x]) cells.push({ x, y });\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t}\n\n\t/**\n\t *\n\t * @param {MouseEvent} event\n\t */\n\tfunction getClickPosition(event) {\n\t\tconst rect = boardRef.current.getBoundingClientRect();\n\t\tlet offX, offY;\n\t\toffX = clientX - rect.left;\n\t\toffY = event.clientY - rect.top;\n\t\tconst x = Math.floor(offX / props.size);\n\t\tconst y = Math.floor(offY / props.size);\n\t\treturn {\n\t\t\tx,\n\t\t\ty,\n\t\t};\n\t}\n}\n\n// utilities\nfunction randomColor() {\n\treturn 30 + Math.floor(Math.random() * 200);\n}\n\nfunction makeEmptyBoard(rows, cols) {\n\tlet results = [];\n\tfor (let y = 0; y < rows; y++) {\n\t\tresults.push([]);\n\t\tfor (let x = 0; x < cols; x++) {\n\t\t\tresults[y].push(false);\n\t\t}\n\t}\n\treturn results;\n}\n"]},"metadata":{},"sourceType":"module"}