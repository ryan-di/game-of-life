{"ast":null,"code":"var _jsxFileName = \"/Users/ryandi/Documents/projects/react/game-of-life-functional/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cell(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cell\",\n    onClick: props.onClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Cell;\n\nfunction Board(props) {\n  function renderCell(i) {\n    return /*#__PURE__*/_jsxDEV(Cell, {\n      onClick: () => props.onClick(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }, this);\n  }\n\n  let rows = [];\n  let cols = [];\n\n  for (let i = 0; i < props.rows; i++) {\n    rows.push(i);\n  }\n\n  for (let i = 0; i < props.cols; i++) {\n    cols.push(i);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '0px auto',\n      maxWidth: '800px'\n    },\n    children: rows.map(i => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: cols.map(j => renderCell(i * props.cols + j))\n      }, `row ${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 6\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = Board;\n\nfunction Game(props) {\n  _s();\n\n  const [history, setHistory] = useState([]);\n  const [board, setBoard] = useState([]);\n\n  function handleClick(i) {\n    console.log(`clicked ${i}`);\n    console.log(board[i]); // cell i was clicked => we need to filp the status of cells i\n\n    if (board[i]) {\n      board[i] = !board[i];\n      setBoard(board);\n    } else {\n      board[i] = true;\n      setBoard(board);\n    }\n\n    console.log(board[i]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Board, {\n    rows: props.rows,\n    cols: props.cols,\n    onClick: i => handleClick(i)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"XR4lTSett7ChbTHsXVdScxfx+zo=\");\n\n_c3 = Game;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Game, {\n    rows: 20,\n    cols: 30\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 2\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"sources":["/Users/ryandi/Documents/projects/react/game-of-life-functional/src/index.js"],"names":["React","useState","ReactDOM","reportWebVitals","Cell","props","onClick","Board","renderCell","i","rows","cols","push","margin","maxWidth","map","j","Game","history","setHistory","board","setBoard","handleClick","console","log","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nfunction Cell(props) {\n\treturn <button className=\"cell\" onClick={props.onClick}></button>;\n}\n\nfunction Board(props) {\n\tfunction renderCell(i) {\n\t\treturn <Cell onClick={() => props.onClick(i)} key={i} />;\n\t}\n\n\tlet rows = [];\n\tlet cols = [];\n\tfor (let i = 0; i < props.rows; i++) {\n\t\trows.push(i);\n\t}\n\tfor (let i = 0; i < props.cols; i++) {\n\t\tcols.push(i);\n\t}\n\n\treturn (\n\t\t<div style={{ margin: '0px auto', maxWidth: '800px' }}>\n\t\t\t{rows.map((i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"board-row\" key={`row ${i}`}>\n\t\t\t\t\t\t{cols.map((j) => renderCell(i * props.cols + j))}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n}\n\nfunction Game(props) {\n\tconst [history, setHistory] = useState([]);\n\tconst [board, setBoard] = useState([]);\n\n\tfunction handleClick(i) {\n\t\tconsole.log(`clicked ${i}`);\n\t\tconsole.log(board[i]);\n\t\t// cell i was clicked => we need to filp the status of cells i\n\t\tif (board[i]) {\n\t\t\tboard[i] = !board[i];\n\t\t\tsetBoard(board);\n\t\t} else {\n\t\t\tboard[i] = true;\n\t\t\tsetBoard(board);\n\t\t}\n\t\tconsole.log(board[i]);\n\t}\n\n\treturn (\n\t\t<Board\n\t\t\trows={props.rows}\n\t\t\tcols={props.cols}\n\t\t\tonClick={(i) => handleClick(i)}\n\t\t/>\n\t);\n}\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Game rows={20} cols={30} />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}